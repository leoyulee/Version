local ReplicatedStorage = game:GetService("ReplicatedStorage")
return function()
    local Version = require(ReplicatedStorage.Versioner.Version)
    describe("Version", function()
        it("should have its functions", function()
            expect(Version).to.be.ok() --"Version didn't return anything!"
            expect(Version).to.be.a("table") --"Version isn't a table!"
            expect(Version.new).to.be.a("function")-- "Version.new isn't a function!")
        end)
        it("should be able to create a Version Object", function()
            local Version1: Version.Version = Version.new(1,2,3)
            --print("Version1 Metatable:",getmetatable(Version1))
            expect(Version1:GetMajorVersion()).to.equal(1) --"Test Version1 Object did not set its MajorVersion properly! Expected 1, got "..Version1:GetMajorVersion())
            expect(Version1:GetMinorVersion()).to.equal(2) --"Test Version1 Object did not set its MinorVersion properly! Expected 2, got "..Version1:GetMinorVersion())
            expect(Version1:GetPatchVersion()).to.equal(3) --"Test Version1 Object did not set its PatchVersion properly! Expected 3, got "..Version1:GetPatchVersion())
            it("should be able to be converted into a string", function()
                expect(tostring(Version1)).to.equal("1.2.3") --"Test Version1 Object did not return expected result of 1.2.3! Instead, it returned: "..tostring(Version1)))
            end)
            it("should be able to be compared to other Version Objects", function()
                local DupeVersion1: Version.Version = Version.new(1,2,3)
                it("should return true when compared to the same valued Version Object", function()
                    expect(Version1 == DupeVersion1).to.equal(true) --"Version1 and DupeVersion1 should be equivelant, but isn't!")
                end)
                it("should return true when compared to itself", function()
                    expect(Version1 == Version1).to.equal(true) --"Version1 and Version1 should be equivelant, but isn't!")
                end)
                it("should share the same meta table with other Version Objects", function()
                    expect(getmetatable(Version1)).to.equal(getmetatable(DupeVersion1))
                end)
                local MajorLessVersion: Version.Version = Version.new(0,4,5)
                it("should return false when compared to a differently valued Version Object", function()
                    expect(Version1 == MajorLessVersion).to.equal(false)
                end)
                expect(Version1 > MajorLessVersion).to.equal(true)----, "Test Version1 Object should be greater than MajorLessVersion Object!")
                expect(Version1 >= MajorLessVersion).to.equal(true)--, "Test Version1 Object should be greater than MajorLessVersion Object!")
                expect(Version1 < MajorLessVersion).to.never.equal(true)--, "Test Version1 Object should be greater than MajorLessVersion Object!")
                expect(Version1 <= MajorLessVersion).to.never.equal(true)--, "Test Version1 Object should be greater than MajorLessVersion Object!")
                expect(Version1 < DupeVersion1).to.never.equal(true)--, "Version1 and DupeVersion1 should not be less than DupeVersion1!")
                expect(Version1 < Version1).to.never.equal(true)--, "Version1 and DupeVersion1 should not be less than Version1")
                expect(Version1 > DupeVersion1).to.never.equal(true)--, "Version1 and DupeVersion1 should not be less than DupeVersion1!")
                expect(Version1 > Version1).to.never.equal(true)--, "Version1 and DupeVersion1 should not be less than Version1")
            end)
            it("should be able to be concatenated to a string",function()
                local ConcatTest = "Version1: "..Version1
                expect(ConcatTest).to.equal("Version1: 1.2.3")--, "ConcatTest with Version1: .. Version1 did not return Version1: 1.2.3! Instead it returned: ".. ConcatTest)
            end)
        end)
    end)
end